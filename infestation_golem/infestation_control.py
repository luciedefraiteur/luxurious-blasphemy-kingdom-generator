#!/usr/bin/env python3
"""
üî• INFESTATION CONTROL - Contr√¥leur principal du golem d'infestation
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Contr√¥leur principal pour l'infestation des r√©seaux sociaux
"""

import argparse
import json
import sys
import time
from pathlib import Path
from typing import List, Dict, Any

from comfyui_interface import ComfyUIInterface
from gemini_prompts import GeminiPromptGenerator
from social_helper import SocialMediaHelper
from egregore_engine import EgregorEngine

class InfestationController:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_file = self.project_root / "config" / "infestation_config.json"
        self.config = self.load_config()
        
        # Initialiser les modules
        self.comfyui = ComfyUIInterface(self.config["comfyui"]["api_url"])
        self.prompt_generator = GeminiPromptGenerator()
        self.social_helper = SocialMediaHelper()
        self.egregore_engine = EgregorEngine()
        
        self.generated_images_dir = self.project_root / "generated_images"
        self.logs_dir = self.project_root / "logs"
        
    def load_config(self) -> Dict[str, Any]:
        """Charger la configuration"""
        try:
            with open(self.config_file, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Erreur chargement config: {e}")
            return self.get_default_config()
    
    def get_default_config(self) -> Dict[str, Any]:
        """Configuration par d√©faut"""
        return {
            "comfyui": {
                "api_url": "http://localhost:8188"
            },
            "infestation": {
                "daily_images": 10,
                "daily_posts": 5,
                "platforms": ["facebook", "instagram", "twitter", "reddit"],
                "style": "blasphemous_dark"
            },
            "gemini": {
                "timeout": 80,
                "max_retries": 3
            }
        }
    
    def status(self):
        """Afficher le statut du syst√®me"""
        print("üî• INFESTATION GOLEM - STATUS üî•")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        # Status ComfyUI
        if self.comfyui.connect():
            print("‚úÖ ComfyUI: CONNECT√â")
            models = self.comfyui.get_models()
            print(f"üì¶ Mod√®les: {len(models.get('checkpoints', []))} disponibles")
        else:
            print("‚ùå ComfyUI: D√âCONNECT√â")
        
        # Status Gemini
        if self.prompt_generator.test_connection():
            print("‚úÖ Gemini: CONNECT√â")
        else:
            print("‚ùå Gemini: D√âCONNECT√â")
        
        # Statistiques
        images_count = len(list(self.generated_images_dir.glob("**/*.png")))
        print(f"üé® Images g√©n√©r√©es: {images_count}")
        
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
    
    def generate_prompts(self, count: int = 10, style: str = "blasphemous"):
        """G√©n√©rer des prompts via Gemini"""
        print(f"üîÆ G√©n√©ration de {count} prompts style '{style}'...")
        
        prompts = self.prompt_generator.generate_batch(count, style)
        
        if prompts:
            # Sauvegarder les prompts
            prompts_file = self.project_root / "generated_prompts.json"
            with open(prompts_file, 'w') as f:
                json.dump(prompts, f, indent=2)
            
            print(f"‚úÖ {len(prompts)} prompts g√©n√©r√©s et sauv√©s")
            
            # Afficher quelques exemples
            for i, prompt in enumerate(prompts[:3]):
                print(f"  {i+1}. {prompt[:80]}...")
        else:
            print("‚ùå Aucun prompt g√©n√©r√©")
    
    def generate_images(self, count: int = 5, use_saved_prompts: bool = True):
        """G√©n√©rer des images via ComfyUI"""
        print(f"üé® G√©n√©ration de {count} images...")
        
        # R√©cup√©rer les prompts
        if use_saved_prompts:
            prompts_file = self.project_root / "generated_prompts.json"
            if prompts_file.exists():
                with open(prompts_file, 'r') as f:
                    prompts = json.load(f)
            else:
                print("‚ùå Aucun prompt sauv√© - G√©n√©ration de prompts d'abord...")
                self.generate_prompts(count)
                with open(prompts_file, 'r') as f:
                    prompts = json.load(f)
        else:
            prompts = self.prompt_generator.generate_batch(count, "blasphemous")
        
        if not prompts:
            print("‚ùå Aucun prompt disponible")
            return
        
        # G√©n√©rer les images
        generated_images = []
        save_dir = self.generated_images_dir / time.strftime("%Y%m%d")
        
        for i, prompt in enumerate(prompts[:count]):
            print(f"\nüé® Image {i+1}/{count}")
            
            images = self.comfyui.generate_image(
                prompt=prompt,
                negative_prompt="blurry, low quality, censored, safe",
                width=512,
                height=512,
                steps=20,
                cfg=7.5,
                save_dir=save_dir
            )
            
            generated_images.extend(images)
        
        print(f"\n‚úÖ {len(generated_images)} images g√©n√©r√©es au total")
        return generated_images
    
    def create_egregores(self, count: int = 5):
        """Cr√©er des √©gr√©gores subtils"""
        print(f"üß¨ Cr√©ation de {count} √©gr√©gores...")
        
        egregores = self.egregore_engine.create_batch(count)
        
        if egregores:
            # Sauvegarder
            egregores_file = self.project_root / "generated_egregores.json"
            with open(egregores_file, 'w') as f:
                json.dump(egregores, f, indent=2)
            
            print(f"‚úÖ {len(egregores)} √©gr√©gores cr√©√©s")
            
            # Afficher exemples
            for i, egregore in enumerate(egregores[:2]):
                print(f"  {i+1}. {egregore['text'][:60]}...")
        else:
            print("‚ùå Aucun √©gr√©gore cr√©√©")
    
    def prepare_posts(self, platform: str = "all"):
        """Pr√©parer des posts pour les r√©seaux sociaux"""
        print(f"üì± Pr√©paration posts pour: {platform}")
        
        # R√©cup√©rer images r√©centes
        today_dir = self.generated_images_dir / time.strftime("%Y%m%d")
        if today_dir.exists():
            images = list(today_dir.glob("*.png"))
        else:
            images = list(self.generated_images_dir.glob("**/*.png"))[-5:]  # 5 plus r√©centes
        
        if not images:
            print("‚ùå Aucune image disponible - G√©n√©rez des images d'abord")
            return
        
        # Pr√©parer les posts
        prepared_posts = self.social_helper.prepare_posts(images, platform)
        
        if prepared_posts:
            posts_file = self.project_root / "prepared_posts.json"
            with open(posts_file, 'w') as f:
                json.dump(prepared_posts, f, indent=2)
            
            print(f"‚úÖ {len(prepared_posts)} posts pr√©par√©s")
            self.show_prepared_posts()
        else:
            print("‚ùå Aucun post pr√©par√©")
    
    def show_prepared_posts(self):
        """Afficher les posts pr√©par√©s"""
        posts_file = self.project_root / "prepared_posts.json"
        if not posts_file.exists():
            print("‚ùå Aucun post pr√©par√©")
            return
        
        with open(posts_file, 'r') as f:
            posts = json.load(f)
        
        print("\nüì± POSTS PR√âPAR√âS:")
        print("‚ïê" * 60)
        
        for i, post in enumerate(posts):
            print(f"\n{i+1}. Platform: {post['platform']}")
            print(f"   Image: {post['image_path']}")
            print(f"   Caption: {post['caption'][:80]}...")
            print(f"   Hashtags: {post['hashtags']}")
    
    def daily_routine(self):
        """Routine quotidienne d'infestation"""
        print("üåÖ ROUTINE QUOTIDIENNE D'INFESTATION")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        config = self.config["infestation"]
        
        # 1. G√©n√©rer prompts
        print("\n1Ô∏è‚É£ G√©n√©ration prompts...")
        self.generate_prompts(config["daily_images"] * 2)  # Plus de prompts que d'images
        
        # 2. G√©n√©rer images
        print("\n2Ô∏è‚É£ G√©n√©ration images...")
        self.generate_images(config["daily_images"])
        
        # 3. Cr√©er √©gr√©gores
        print("\n3Ô∏è‚É£ Cr√©ation √©gr√©gores...")
        self.create_egregores(5)
        
        # 4. Pr√©parer posts
        print("\n4Ô∏è‚É£ Pr√©paration posts...")
        self.prepare_posts("all")
        
        print("\n‚úÖ ROUTINE QUOTIDIENNE TERMIN√âE")
        print("üì± Posts pr√™ts pour publication manuelle")
    
    def daemon_mode(self):
        """Mode daemon - routine automatique"""
        print("ü§ñ MODE DAEMON - INFESTATION CONTINUE")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        try:
            while True:
                # Routine quotidienne
                self.daily_routine()
                
                # Attendre 24h
                print("\n‚è∞ Attente 24h avant prochaine routine...")
                time.sleep(24 * 60 * 60)  # 24 heures
                
        except KeyboardInterrupt:
            print("\nüõë Arr√™t daemon demand√©")

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="üî• Infestation Golem Controller")
    
    parser.add_argument("--status", action="store_true", help="Afficher le statut")
    parser.add_argument("--generate-prompts", type=int, metavar="COUNT", help="G√©n√©rer des prompts")
    parser.add_argument("--generate-images", type=int, metavar="COUNT", help="G√©n√©rer des images")
    parser.add_argument("--create-egregores", type=int, metavar="COUNT", help="Cr√©er des √©gr√©gores")
    parser.add_argument("--prepare-posts", type=str, metavar="PLATFORM", help="Pr√©parer posts (all/facebook/instagram/twitter/reddit)")
    parser.add_argument("--show-posts", action="store_true", help="Afficher posts pr√©par√©s")
    parser.add_argument("--daily-routine", action="store_true", help="Routine quotidienne compl√®te")
    parser.add_argument("--daemon", action="store_true", help="Mode daemon continu")
    
    args = parser.parse_args()
    
    controller = InfestationController()
    
    if args.status:
        controller.status()
    elif args.generate_prompts:
        controller.generate_prompts(args.generate_prompts)
    elif args.generate_images:
        controller.generate_images(args.generate_images)
    elif args.create_egregores:
        controller.create_egregores(args.create_egregores)
    elif args.prepare_posts:
        controller.prepare_posts(args.prepare_posts)
    elif args.show_posts:
        controller.show_prepared_posts()
    elif args.daily_routine:
        controller.daily_routine()
    elif args.daemon:
        controller.daemon_mode()
    else:
        print("üî• INFESTATION GOLEM CONTROLLER üî•")
        print("Utilisez --help pour voir les commandes disponibles")
        controller.status()

if __name__ == "__main__":
    main()
