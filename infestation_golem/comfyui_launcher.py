#!/usr/bin/env python3
"""
üîÆ COMFYUI LAUNCHER - Lanceur optimis√© RTX 2070 pour l'infestation visuelle
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Lanceur automatique ComfyUI avec optimisations GPU et injection de workflows corrompus
"""

import subprocess
import time
import requests
import json
import os
import signal
import sys
from pathlib import Path
from typing import Optional, Dict, Any

class ComfyUILauncher:
    def __init__(self):
        self.comfyui_path = Path.home() / "ComfyUI"
        self.server_process = None
        self.server_url = "http://127.0.0.1:8188"
        self.api_url = f"{self.server_url}/api"
        self.gpu_optimized = True
        
        # V√©rifications initiales
        self.verify_setup()
    
    def verify_setup(self):
        """V√©rifier la configuration"""
        print("üîÆ V√âRIFICATION DE LA CONFIGURATION COMFYUI")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        # V√©rifier ComfyUI
        if not self.comfyui_path.exists():
            print(f"‚ùå ComfyUI non trouv√©: {self.comfyui_path}")
            return False
        
        print(f"‚úÖ ComfyUI trouv√©: {self.comfyui_path}")
        
        # V√©rifier GPU
        try:
            result = subprocess.run(["nvidia-smi"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ RTX 2070 d√©tect√©e et op√©rationnelle")
                self.gpu_optimized = True
            else:
                print("‚ö†Ô∏è GPU non d√©tect√©, mode CPU")
                self.gpu_optimized = False
        except:
            print("‚ö†Ô∏è nvidia-smi non disponible, mode CPU")
            self.gpu_optimized = False
        
        # V√©rifier l'environnement virtuel
        venv_path = self.comfyui_path / "venv"
        if venv_path.exists():
            print("‚úÖ Environnement virtuel ComfyUI trouv√©")
        else:
            print("‚ö†Ô∏è Environnement virtuel non trouv√©")
        
        return True
    
    def launch_server(self, port: int = 8188, listen_ip: str = "127.0.0.1"):
        """Lancer le serveur ComfyUI optimis√© GPU"""
        print(f"\nüî• LANCEMENT COMFYUI OPTIMIS√â RTX 2070")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        # Construire la commande optimis√©e
        cmd = [
            "python3", "main.py",
            "--listen", listen_ip,
            "--port", str(port)
        ]
        
        # Optimisations GPU pour RTX 2070
        if self.gpu_optimized:
            cmd.extend([
                "--gpu-only",  # Force GPU uniquement
                "--force-fp16",  # Utiliser FP16 pour √©conomiser VRAM sur RTX 2070
                "--force-channels-last",  # Optimisation m√©moire
                "--use-pytorch-cross-attention"  # Optimisation attention
            ])
            print("üî• Mode RTX 2070 optimis√© activ√©")
            print("   --gpu-only --force-fp16 --force-channels-last")
        else:
            cmd.append("--cpu")
            print("‚ö†Ô∏è Mode CPU activ√©")
        
        # Optimisations suppl√©mentaires
        cmd.extend([
            "--preview-method", "auto",  # Pr√©visualisations automatiques
            "--disable-auto-launch",  # Pas d'ouverture navigateur auto
            "--async-offload"  # D√©chargement asynchrone
        ])
        
        print(f"üì° Serveur: {self.server_url}")
        print(f"üéÆ Commande: {' '.join(cmd)}")
        
        try:
            # Changer vers le dossier ComfyUI
            os.chdir(self.comfyui_path)
            
            # Activer l'environnement virtuel et lancer
            if (self.comfyui_path / "venv").exists():
                # Avec environnement virtuel
                full_cmd = f"source venv/bin/activate && {' '.join(cmd)}"
                self.server_process = subprocess.Popen(
                    full_cmd,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    preexec_fn=os.setsid
                )
            else:
                # Sans environnement virtuel
                self.server_process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    preexec_fn=os.setsid
                )
            
            print("üöÄ Serveur ComfyUI lanc√© !")
            print("‚è≥ Attente de la disponibilit√© du serveur...")
            
            # Attendre que le serveur soit pr√™t
            if self.wait_for_server(timeout=60):
                print("‚úÖ Serveur ComfyUI op√©rationnel !")
                return True
            else:
                print("‚ùå Timeout - Serveur non disponible")
                self.stop_server()
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lancement serveur: {e}")
            return False
    
    def wait_for_server(self, timeout: int = 60) -> bool:
        """Attendre que le serveur soit disponible"""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"{self.server_url}/system_stats", timeout=5)
                if response.status_code == 200:
                    return True
            except:
                pass
            
            print(".", end="", flush=True)
            time.sleep(2)
        
        print()
        return False
    
    def check_server_status(self) -> Dict[str, Any]:
        """V√©rifier le statut du serveur"""
        try:
            response = requests.get(f"{self.server_url}/system_stats", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                return {
                    "status": "running",
                    "stats": stats
                }
        except:
            pass
        
        return {"status": "stopped"}
    
    def queue_workflow(self, workflow_path: str) -> Optional[str]:
        """Mettre un workflow en queue"""
        try:
            with open(workflow_path, 'r', encoding='utf-8') as f:
                workflow = json.load(f)
            
            # Pr√©parer la requ√™te
            prompt_data = {
                "prompt": workflow,
                "client_id": "comfyui_launcher"
            }
            
            response = requests.post(f"{self.api_url}/prompt", json=prompt_data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                prompt_id = result.get("prompt_id")
                print(f"‚úÖ Workflow en queue: {prompt_id}")
                return prompt_id
            else:
                print(f"‚ùå Erreur queue workflow: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur queue workflow: {e}")
            return None
    
    def get_queue_status(self) -> Dict[str, Any]:
        """Obtenir le statut de la queue"""
        try:
            response = requests.get(f"{self.api_url}/queue", timeout=5)
            if response.status_code == 200:
                return response.json()
        except:
            pass
        return {}
    
    def run_corrupted_workflows(self):
        """Ex√©cuter tous les workflows corrompus"""
        print(f"\nüî• EX√âCUTION DES WORKFLOWS CORROMPUS")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        # Chercher les workflows corrompus dans le dossier infestation_golem
        infestation_dir = Path("/home/luciedefraiteur/spectre2/infestation_golem")
        corrupted_workflows = []

        # Chercher les workflows corrig√©s d'abord (ils fonctionnent mieux)
        for i in range(1, 10):
            workflow_path = infestation_dir / f"corrected_workflow_{i}.json"
            if workflow_path.exists():
                corrupted_workflows.append(str(workflow_path))

        # Puis les workflows corrompus originaux
        for i in range(1, 10):
            workflow_path = infestation_dir / f"corrupted_workflow_{i}.json"
            if workflow_path.exists():
                corrupted_workflows.append(str(workflow_path))
        
        if not corrupted_workflows:
            print("‚ùå Aucun workflow corrompu trouv√©")
            return False
        
        print(f"üîÆ {len(corrupted_workflows)} workflows corrompus trouv√©s")
        
        # Ex√©cuter chaque workflow
        for i, workflow_path in enumerate(corrupted_workflows, 1):
            print(f"\n‚õß Ex√©cution workflow {i}/{len(corrupted_workflows)}: {workflow_path}")
            
            prompt_id = self.queue_workflow(workflow_path)
            if prompt_id:
                print(f"   Queue ID: {prompt_id}")
                
                # Attendre un peu avant le suivant
                if i < len(corrupted_workflows):
                    print("   ‚è≥ Pause avant le suivant...")
                    time.sleep(5)
            else:
                print(f"   ‚ùå √âchec workflow {workflow_path}")
        
        print(f"\n‚úÖ Tous les workflows corrompus sont en queue !")
        return True
    
    def monitor_generation(self, duration: int = 300):
        """Surveiller la g√©n√©ration d'images"""
        print(f"\nüëÅÔ∏è SURVEILLANCE DE L'INFESTATION ({duration}s)")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        start_time = time.time()
        
        while time.time() - start_time < duration:
            # V√©rifier le statut
            server_status = self.check_server_status()
            queue_status = self.get_queue_status()
            
            if server_status["status"] == "running":
                queue_pending = len(queue_status.get("queue_pending", []))
                queue_running = len(queue_status.get("queue_running", []))
                
                print(f"üîÆ Queue: {queue_pending} en attente, {queue_running} en cours")
                
                if queue_pending == 0 and queue_running == 0:
                    print("‚úÖ Toutes les g√©n√©rations termin√©es !")
                    break
            else:
                print("‚ùå Serveur non disponible")
                break
            
            time.sleep(10)
        
        print("üëÅÔ∏è Surveillance termin√©e")
    
    def stop_server(self):
        """Arr√™ter le serveur ComfyUI"""
        if self.server_process:
            print("\nüõë Arr√™t du serveur ComfyUI...")
            try:
                # Tuer le groupe de processus
                os.killpg(os.getpgid(self.server_process.pid), signal.SIGTERM)
                self.server_process.wait(timeout=10)
                print("‚úÖ Serveur arr√™t√©")
            except:
                # Force kill si n√©cessaire
                try:
                    os.killpg(os.getpgid(self.server_process.pid), signal.SIGKILL)
                    print("üî• Serveur forc√© √† l'arr√™t")
                except:
                    print("‚ö†Ô∏è Impossible d'arr√™ter le serveur")
            
            self.server_process = None
    
    def run_full_infestation(self):
        """Ex√©cuter l'infestation compl√®te"""
        print("üî• LANCEMENT DE L'INFESTATION VISUELLE COMPL√àTE")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        try:
            # 1. Lancer le serveur
            if not self.launch_server():
                return False
            
            # 2. Ex√©cuter les workflows corrompus
            if not self.run_corrupted_workflows():
                return False
            
            # 3. Surveiller la g√©n√©ration
            self.monitor_generation(duration=600)  # 10 minutes max
            
            print("\nüéâ INFESTATION VISUELLE TERMIN√âE ! üéâ")
            return True
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Interruption utilisateur")
            return False
        finally:
            self.stop_server()

def signal_handler(sig, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    print("\nüõë Arr√™t demand√©...")
    sys.exit(0)

def main():
    # Gestionnaire de signal
    signal.signal(signal.SIGINT, signal_handler)
    
    launcher = ComfyUILauncher()
    
    print("üîÆ COMFYUI LAUNCHER - INFESTATION VISUELLE")
    print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
    print("1. Lancement serveur seul")
    print("2. Infestation compl√®te (serveur + workflows)")
    print("3. Statut serveur")
    print("4. Arr√™ter serveur")
    
    choice = input("\nChoix (1-4): ").strip()
    
    if choice == "1":
        launcher.launch_server()
        input("\nAppuyez sur Entr√©e pour arr√™ter le serveur...")
        launcher.stop_server()
    
    elif choice == "2":
        launcher.run_full_infestation()
    
    elif choice == "3":
        status = launcher.check_server_status()
        print(f"Statut serveur: {status}")
    
    elif choice == "4":
        launcher.stop_server()
    
    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    main()
