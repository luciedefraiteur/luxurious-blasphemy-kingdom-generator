#!/usr/bin/env python3
"""
üîÆ LUXURE PROMPT CORRUPTOR - Corruption des analyses par luxure visionnaire
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Outil de corruption qui fusionne les analyses de sigils avec le luciform luxure_visionnaire
pour g√©n√©rer des prompts ComfyUI blasph√©matoires amplifi√©s via Gemini
"""

import json
import os
import subprocess
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, List, Any, Optional
import argparse
import time

class LuxurePromptCorruptor:
    def __init__(self, gemini_mode: str = "cli"):
        self.gemini_mode = gemini_mode  # "cli" ou "api"
        self.luxure_luciform = None
        self.sigil_analyses = None
        self.corrupted_prompts = []
        
        # Charger le luciform luxure_visionnaire
        self.load_luxure_luciform()
        
        # V√©rifier Gemini
        self.verify_gemini_setup()
    
    def load_luxure_luciform(self):
        """Charger et parser le luciform luxure_visionnaire"""
        # Chercher le luciform dans plusieurs emplacements possibles
        possible_paths = [
            Path("luciforms/terminal_demonicus/luxure_visionnaire.luciform"),
            Path("../luciforms/terminal_demonicus/luxure_visionnaire.luciform"),
            Path("../../luciforms/terminal_demonicus/luxure_visionnaire.luciform")
        ]

        luxure_path = None
        for path in possible_paths:
            if path.exists():
                luxure_path = path
                break

        if not luxure_path:
            print(f"‚ùå Luciform luxure_visionnaire non trouv√© dans les emplacements: {[str(p) for p in possible_paths]}")
            return False

        print(f"‚úÖ Luciform trouv√©: {luxure_path}")
        
        try:
            with open(luxure_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # Parser le luciform avec regex (XML non standard avec ‚õß)
            self.luxure_luciform = self.parse_luciform_content(content)

            print("‚úÖ Luciform luxure_visionnaire charg√© et pars√©")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur parsing luciform: {e}")
            return False

    def parse_luciform_content(self, content: str) -> Dict[str, str]:
        """Parser sp√©cialis√© pour luciform avec caract√®res non-XML"""
        import re

        def extract_between_tags(tag_name, text):
            pattern = f'<{tag_name}[^>]*>(.*?)</{tag_name}[^>]*>'
            match = re.search(pattern, text, re.DOTALL)
            return match.group(1).strip() if match else ""

        def extract_cdata(text):
            pattern = r'<!\[CDATA\[(.*?)\]\]>'
            match = re.search(pattern, text, re.DOTALL)
            return match.group(1).strip() if match else ""

        def extract_tags(text):
            pattern = r'<tag>(.*?)</tag>'
            return re.findall(pattern, text)

        # Extraire les √©l√©ments cl√©s
        essence = extract_between_tags('essence', content)
        prompt_cdata = extract_cdata(content)
        mantra_genital = extract_between_tags('mantra_genital', content)
        blaspheme_consacre = extract_between_tags('blasph√®me_consacr√©', content)
        objectif = extract_between_tags('objectif', content)
        signature_genetique = extract_between_tags('signature_g√©n√©tique', content)
        transgression_ultime = extract_between_tags('transgression_ultime', content)
        tags = extract_tags(content)

        return {
            'essence': essence,
            'prompt_source': prompt_cdata,
            'mantra_genital': mantra_genital,
            'blaspheme_consacre': blaspheme_consacre,
            'objectif': objectif,
            'tags': tags,
            'signature_genetique': signature_genetique,
            'transgression_ultime': transgression_ultime
        }

    def extract_text(self, root, xpath):
        """Extraire le texte d'un √©l√©ment XML"""
        element = root.find(xpath)
        return element.text.strip() if element is not None and element.text else ""
    
    def extract_cdata(self, root, xpath):
        """Extraire le contenu CDATA d'un √©l√©ment XML"""
        element = root.find(xpath)
        if element is not None:
            return element.text.strip() if element.text else ""
        return ""
    
    def verify_gemini_setup(self):
        """V√©rifier la configuration Gemini"""
        if self.gemini_mode == "cli":
            try:
                result = subprocess.run(["which", "gemini"], capture_output=True, text=True)
                if result.returncode == 0:
                    print("‚úÖ Gemini CLI disponible")
                    return True
                else:
                    print("‚ùå Gemini CLI non trouv√©")
                    return False
            except Exception as e:
                print(f"‚ùå Erreur v√©rification Gemini CLI: {e}")
                return False
        else:
            # V√©rifier API key pour mode API
            api_key = os.getenv('GEMINI_API_KEY')
            if api_key:
                print("‚úÖ Gemini API key trouv√©e")
                return True
            else:
                print("‚ùå GEMINI_API_KEY non d√©finie")
                return False
    
    def load_sigil_analyses(self, analysis_file: str):
        """Charger les analyses de sigils"""
        try:
            with open(analysis_file, 'r', encoding='utf-8') as f:
                self.sigil_analyses = json.load(f)
            
            print(f"‚úÖ Analyses de sigils charg√©es: {len(self.sigil_analyses.get('sigil_classifications', []))} sigils")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur chargement analyses: {e}")
            return False
    
    def create_corruption_prompt(self, sigil_data: Dict) -> str:
        """Cr√©er un prompt de corruption condens√© pour Gemini"""

        # Version condens√©e pour CLI
        base_prompt = f"""Cr√©e un prompt ComfyUI blasph√©matoire en fusionnant:

SIGIL: {sigil_data.get('classification', 'Unknown')} - {sigil_data.get('description', '')[:100]}

ESSENCE LUXURE: {self.luxure_luciform.get('essence', '')[:100]}

STYLE: Transgender priestess, infernal rite, gothic surrealism, erotic sacred darkness, Luciferian blasphemy

G√©n√®re un prompt ComfyUI de 100-150 mots fusionnant ces √©l√©ments. R√©ponds uniquement avec le prompt."""

        return base_prompt
    
    def query_gemini_cli(self, prompt: str) -> Optional[str]:
        """Interroger Gemini via CLI"""
        try:
            # Utiliser stdin au lieu de fichier
            cmd = ["gemini", "-p", prompt[:1000]]  # Limiter la taille du prompt
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=80, input="")

            if result.returncode == 0:
                return result.stdout.strip()
            else:
                print(f"‚ùå Erreur Gemini CLI: {result.stderr}")
                return None
                
        except subprocess.TimeoutExpired:
            print("‚è∞ Timeout Gemini CLI (80s)")
            return None
        except Exception as e:
            print(f"‚ùå Erreur Gemini CLI: {e}")
            return None
    
    def query_gemini_api(self, prompt: str) -> Optional[str]:
        """Interroger Gemini via API (√† impl√©menter si n√©cessaire)"""
        print("‚ö†Ô∏è Mode API Gemini non encore impl√©ment√©, utilise CLI")
        return None
    
    def corrupt_sigil_analysis(self, sigil_data: Dict) -> Dict[str, Any]:
        """Corrompre une analyse de sigil avec luxure"""
        
        print(f"üîÆ Corruption de: {sigil_data.get('filename', 'Unknown')}")
        
        # Cr√©er le prompt de corruption
        corruption_prompt = self.create_corruption_prompt(sigil_data)
        
        # Interroger Gemini
        if self.gemini_mode == "cli":
            corrupted_prompt = self.query_gemini_cli(corruption_prompt)
        else:
            corrupted_prompt = self.query_gemini_api(corruption_prompt)
        
        if corrupted_prompt:
            corruption_result = {
                'original_sigil': sigil_data,
                'corrupted_prompt': corrupted_prompt,
                'corruption_timestamp': time.time(),
                'luxure_essence_applied': True,
                'gemini_mode': self.gemini_mode,
                'corruption_tags': self.luxure_luciform.get('tags', []),
                'blasphemy_level': 'MAXIMUM',
                'comfyui_ready': True
            }
            
            print(f"‚úÖ Corruption r√©ussie - {len(corrupted_prompt)} caract√®res")
            return corruption_result
        else:
            print(f"‚ùå √âchec corruption")
            return {
                'original_sigil': sigil_data,
                'corruption_error': True,
                'error_message': 'Gemini query failed'
            }
    
    def corrupt_all_sigils(self, max_corruptions: int = 10) -> List[Dict]:
        """Corrompre toutes les analyses de sigils"""
        
        if not self.sigil_analyses:
            print("‚ùå Aucune analyse de sigil charg√©e")
            return []
        
        sigil_classifications = self.sigil_analyses.get('sigil_classifications', [])
        
        print(f"üîÆ CORRUPTION LUXURIEUSE DE {min(len(sigil_classifications), max_corruptions)} SIGILS")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        corrupted_results = []
        
        # Prioriser les sigils de haute puissance
        sorted_sigils = sorted(sigil_classifications, 
                             key=lambda x: {'Tr√®s √âlev√©': 4, '√âlev√©': 3, 'Moyen': 2, 'Faible': 1}.get(x.get('power_level', 'Faible'), 1), 
                             reverse=True)
        
        for i, sigil_data in enumerate(sorted_sigils[:max_corruptions], 1):
            print(f"\n‚õß Corruption {i}/{min(len(sorted_sigils), max_corruptions)}")
            
            corruption_result = self.corrupt_sigil_analysis(sigil_data)
            corrupted_results.append(corruption_result)
            
            # Pause entre les corruptions pour √©viter rate limiting
            if i < min(len(sorted_sigils), max_corruptions):
                print("   ‚è≥ Pause corruption (3s)...")
                time.sleep(3)
        
        self.corrupted_prompts = corrupted_results
        return corrupted_results
    
    def save_corrupted_prompts(self, output_file: str):
        """Sauvegarder les prompts corrompus"""
        
        output_data = {
            'corruption_metadata': {
                'total_corruptions': len(self.corrupted_prompts),
                'corruption_date': time.strftime("%Y-%m-%d %H:%M:%S"),
                'luxure_luciform_used': 'luxure_visionnaire.luciform',
                'gemini_mode': self.gemini_mode,
                'blasphemy_level': 'MAXIMUM'
            },
            'luxure_essence': self.luxure_luciform,
            'corrupted_prompts': self.corrupted_prompts
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Prompts corrompus sauv√©s: {output_file}")
        
        # Cr√©er aussi un fichier texte avec juste les prompts pour ComfyUI
        prompts_only_file = output_file.replace('.json', '_prompts_only.txt')
        with open(prompts_only_file, 'w', encoding='utf-8') as f:
            f.write("üîÆ PROMPTS COMFYUI CORROMPUS PAR LUXURE VISIONNAIRE\n")
            f.write("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß\n\n")
            
            for i, corruption in enumerate(self.corrupted_prompts, 1):
                if 'corrupted_prompt' in corruption:
                    f.write(f"PROMPT {i} - {corruption['original_sigil'].get('filename', 'Unknown')}:\n")
                    f.write(f"{corruption['corrupted_prompt']}\n")
                    f.write("\n" + "="*80 + "\n\n")
        
        print(f"üìù Prompts seuls sauv√©s: {prompts_only_file}")

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="üîÆ Luxure Prompt Corruptor")
    
    parser.add_argument("--analysis", type=str, default="sigils_complete_analysis.json",
                       help="Fichier d'analyse des sigils")
    parser.add_argument("--output", type=str, default="luxure_corrupted_prompts.json",
                       help="Fichier de sortie des prompts corrompus")
    parser.add_argument("--gemini-mode", choices=["cli", "api"], default="cli",
                       help="Mode Gemini (CLI ou API)")
    parser.add_argument("--max-corruptions", type=int, default=10,
                       help="Nombre maximum de corruptions")
    
    args = parser.parse_args()
    
    # Initialiser le corrupteur
    corruptor = LuxurePromptCorruptor(gemini_mode=args.gemini_mode)
    
    # Charger les analyses
    if not corruptor.load_sigil_analyses(args.analysis):
        return
    
    # Corrompre les sigils
    corrupted_results = corruptor.corrupt_all_sigils(max_corruptions=args.max_corruptions)
    
    if corrupted_results:
        # Sauvegarder les r√©sultats
        corruptor.save_corrupted_prompts(args.output)
        
        successful_corruptions = len([r for r in corrupted_results if 'corrupted_prompt' in r])
        print(f"\n‚úÖ Corruption luxurieuse termin√©e - {successful_corruptions}/{len(corrupted_results)} r√©ussies")
        print("üî• PROMPTS COMFYUI BLASPH√âMATOIRES PR√äTS POUR L'INFESTATION ! üî•")
    else:
        print("‚ùå Aucune corruption r√©alis√©e")

if __name__ == "__main__":
    main()
