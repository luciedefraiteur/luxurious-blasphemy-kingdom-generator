#!/usr/bin/env python3
"""
üî• GPU TEST - Test complet du GPU pour l'infestation
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Test complet du GPU NVIDIA RTX 2070 apr√®s r√©paration des drivers
"""

import subprocess
import sys
import os

def run_command(cmd):
    """Ex√©cuter une commande et retourner le r√©sultat"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def test_nvidia_smi():
    """Tester nvidia-smi"""
    print("üîç Test nvidia-smi...")
    success, stdout, stderr = run_command("nvidia-smi")
    
    if success:
        print("‚úÖ nvidia-smi fonctionne !")
        print(stdout)
        return True
    else:
        print("‚ùå nvidia-smi √©choue :")
        print(stderr)
        return False

def test_pytorch_cuda():
    """Tester PyTorch avec CUDA"""
    print("\nüîç Test PyTorch CUDA...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch version: {torch.__version__}")
        
        if torch.cuda.is_available():
            print("‚úÖ CUDA disponible dans PyTorch !")
            print(f"   Nombre de GPUs: {torch.cuda.device_count()}")
            print(f"   GPU actuel: {torch.cuda.get_device_name(0)}")
            print(f"   M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
            
            # Test simple
            x = torch.randn(1000, 1000).cuda()
            y = torch.randn(1000, 1000).cuda()
            z = torch.mm(x, y)
            print("‚úÖ Test calcul GPU r√©ussi !")
            return True
        else:
            print("‚ùå CUDA non disponible dans PyTorch")
            return False
            
    except ImportError:
        print("‚ùå PyTorch non install√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur PyTorch: {e}")
        return False

def test_transformers_gpu():
    """Tester Transformers avec GPU"""
    print("\nüîç Test Transformers GPU...")
    
    try:
        import torch
        from transformers import pipeline
        
        if not torch.cuda.is_available():
            print("‚ùå CUDA non disponible pour Transformers")
            return False
        
        # Test simple avec un petit mod√®le
        print("   Chargement d'un mod√®le de test...")
        classifier = pipeline("sentiment-analysis", device=0)  # device=0 pour GPU
        
        result = classifier("This is a test")
        print("‚úÖ Test Transformers GPU r√©ussi !")
        print(f"   R√©sultat: {result}")
        return True
        
    except ImportError:
        print("‚ùå Transformers non install√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur Transformers: {e}")
        return False

def test_blip2_gpu():
    """Tester BLIP-2 avec GPU"""
    print("\nüîç Test BLIP-2 GPU...")
    
    try:
        import torch
        from transformers import Blip2Processor, Blip2ForConditionalGeneration
        
        if not torch.cuda.is_available():
            print("‚ùå CUDA non disponible pour BLIP-2")
            return False
        
        print("   Test de chargement BLIP-2 sur GPU...")
        device = "cuda"
        
        # Juste tester l'initialisation sans charger le mod√®le complet
        print(f"   Device CUDA: {device}")
        print(f"   M√©moire GPU libre: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        
        # Test simple tensor
        test_tensor = torch.randn(100, 100).to(device)
        print("‚úÖ BLIP-2 peut utiliser le GPU !")
        return True
        
    except ImportError:
        print("‚ùå BLIP-2 dependencies non install√©es")
        return False
    except Exception as e:
        print(f"‚ùå Erreur BLIP-2: {e}")
        return False

def test_comfyui_compatibility():
    """Tester la compatibilit√© ComfyUI"""
    print("\nüîç Test compatibilit√© ComfyUI...")
    
    # V√©rifier que ComfyUI existe
    comfyui_path = os.path.expanduser("~/ComfyUI")
    if not os.path.exists(comfyui_path):
        print("‚ùå ComfyUI non trouv√©")
        return False
    
    print(f"‚úÖ ComfyUI trouv√©: {comfyui_path}")
    
    # V√©rifier l'environnement virtuel
    venv_path = os.path.join(comfyui_path, "venv")
    if os.path.exists(venv_path):
        print("‚úÖ Environnement virtuel ComfyUI trouv√©")
    else:
        print("‚ö†Ô∏è Environnement virtuel ComfyUI non trouv√©")
    
    return True

def main():
    """Test complet du GPU"""
    print("üî• TEST COMPLET GPU RTX 2070 - INFESTATION READY")
    print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
    
    tests_results = []
    
    # Test 1: nvidia-smi
    tests_results.append(("nvidia-smi", test_nvidia_smi()))
    
    # Test 2: PyTorch CUDA
    tests_results.append(("PyTorch CUDA", test_pytorch_cuda()))
    
    # Test 3: Transformers GPU
    tests_results.append(("Transformers GPU", test_transformers_gpu()))
    
    # Test 4: BLIP-2 GPU
    tests_results.append(("BLIP-2 GPU", test_blip2_gpu()))
    
    # Test 5: ComfyUI compatibility
    tests_results.append(("ComfyUI Compatibility", test_comfyui_compatibility()))
    
    # R√©sum√©
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES TESTS")
    print("="*60)
    
    passed = 0
    total = len(tests_results)
    
    for test_name, result in tests_results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:25} : {status}")
        if result:
            passed += 1
    
    print("="*60)
    print(f"R√âSULTAT FINAL: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ GPU PR√äT POUR L'INFESTATION TOTALE ! üéâ")
        print("üöÄ Vous pouvez maintenant utiliser ComfyUI avec GPU !")
        print("üî• L'analyse d'images sera 10x plus rapide !")
    elif passed >= 3:
        print("‚ö†Ô∏è GPU partiellement fonctionnel")
        print("üí° Certaines fonctionnalit√©s peuvent n√©cessiter des ajustements")
    else:
        print("‚ùå GPU non fonctionnel")
        print("üîß Red√©marrage syst√®me recommand√©")
    
    print("\nüéØ PROCHAINES √âTAPES:")
    if passed >= 3:
        print("1. Relancer ComfyUI avec GPU: cd ~/ComfyUI && source venv/bin/activate && python main.py --listen")
        print("2. Tester g√©n√©ration d'image GPU")
        print("3. Relancer analyse des sigils avec GPU")
        print("4. D√©marrer la fractale r√©cursive")
    else:
        print("1. Red√©marrer le syst√®me")
        print("2. Relancer ce test")
        print("3. Si probl√®me persiste, v√©rifier drivers NVIDIA")

if __name__ == "__main__":
    main()
