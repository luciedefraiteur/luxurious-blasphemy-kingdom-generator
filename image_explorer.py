#!/usr/bin/env python3
"""
üîÆ IMAGE EXPLORER - Explorateur d'images ComfyUI pour Lurkuitae
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Outil pour lister, analyser et d√©crire les images g√©n√©r√©es par ComfyUI
Utilise nos analyseurs existants : hybrid_image_analyzer.py et image_analyzer.py
"""

import os
import json
import time
import sys
from pathlib import Path
from PIL import Image, ExifTags
import hashlib
from typing import List, Dict, Any, Optional

# Importer nos analyseurs existants
try:
    from hybrid_image_analyzer import HybridImageAnalyzer
    HYBRID_ANALYZER_AVAILABLE = True
except ImportError:
    HYBRID_ANALYZER_AVAILABLE = False
    print("‚ö†Ô∏è hybrid_image_analyzer.py non trouv√©")

try:
    from image_analyzer import ImageAnalyzer
    BLIP2_ANALYZER_AVAILABLE = True
except ImportError:
    BLIP2_ANALYZER_AVAILABLE = False
    print("‚ö†Ô∏è image_analyzer.py non trouv√©")

class ImageExplorer:
    def __init__(self):
        self.comfyui_paths = [
            Path.home() / "ComfyUI" / "output",
            Path.home() / "ComfyUI" / "outputs",
            Path("/tmp/ComfyUI_outputs"),
            Path("./ComfyUI_output"),
            Path("./output"),
            Path("./images")
        ]
        self.supported_formats = {'.png', '.jpg', '.jpeg', '.webp', '.bmp', '.tiff'}
        self.images_data = []

        # Initialiser nos analyseurs existants
        self.hybrid_analyzer = None
        self.blip2_analyzer = None

        if HYBRID_ANALYZER_AVAILABLE:
            try:
                self.hybrid_analyzer = HybridImageAnalyzer()
                print("‚úÖ Analyseur hybride CLIP+BLIP2 initialis√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur init analyseur hybride: {e}")

        if BLIP2_ANALYZER_AVAILABLE:
            try:
                self.blip2_analyzer = ImageAnalyzer()
                print("‚úÖ Analyseur BLIP2 initialis√©")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur init analyseur BLIP2: {e}")
        
    def find_comfyui_output_dir(self):
        """Trouver le r√©pertoire de sortie ComfyUI"""
        print("üîç RECHERCHE DU R√âPERTOIRE COMFYUI")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        for path in self.comfyui_paths:
            if path.exists() and path.is_dir():
                print(f"‚úÖ Trouv√©: {path}")
                return path
        
        # Recherche plus large
        print("üîç Recherche √©tendue...")
        home = Path.home()
        for item in home.rglob("ComfyUI*/output*"):
            if item.is_dir():
                print(f"‚úÖ Trouv√© (recherche √©tendue): {item}")
                return item
                
        print("‚ùå Aucun r√©pertoire ComfyUI trouv√©")
        return None
    
    def scan_images(self, directory: Path = None):
        """Scanner les images dans le r√©pertoire"""
        if directory is None:
            directory = self.find_comfyui_output_dir()
            
        if not directory:
            print("‚ùå Impossible de trouver le r√©pertoire d'images")
            return False
            
        print(f"üì∏ SCAN DES IMAGES DANS: {directory}")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        self.images_data = []
        image_count = 0
        
        # Scanner r√©cursivement
        for file_path in directory.rglob("*"):
            if file_path.is_file() and file_path.suffix.lower() in self.supported_formats:
                try:
                    image_info = self.analyze_image(file_path)
                    if image_info:
                        self.images_data.append(image_info)
                        image_count += 1
                        print(f"üì∏ {image_count}: {file_path.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur analyse {file_path.name}: {e}")
        
        print(f"\n‚úÖ {len(self.images_data)} images analys√©es")
        return len(self.images_data) > 0
    
    def analyze_image(self, file_path: Path) -> Optional[Dict[str, Any]]:
        """Analyser une image en d√©tail"""
        try:
            # Informations de base du fichier
            stat = file_path.stat()
            file_size = stat.st_size
            creation_time = stat.st_mtime
            
            # Ouvrir l'image avec PIL
            with Image.open(file_path) as img:
                # Informations de l'image
                width, height = img.size
                format_img = img.format
                mode = img.mode
                
                # Hash pour identifier les doublons
                img_hash = self.calculate_image_hash(file_path)
                
                # M√©tadonn√©es EXIF si disponibles
                exif_data = {}
                if hasattr(img, '_getexif') and img._getexif():
                    exif = img._getexif()
                    for tag_id, value in exif.items():
                        tag = ExifTags.TAGS.get(tag_id, tag_id)
                        exif_data[tag] = value
                
                # Informations ComfyUI dans les m√©tadonn√©es PNG
                comfyui_metadata = {}
                if format_img == 'PNG' and hasattr(img, 'text'):
                    for key, value in img.text.items():
                        if 'workflow' in key.lower() or 'prompt' in key.lower():
                            try:
                                # Essayer de parser le JSON
                                comfyui_metadata[key] = json.loads(value)
                            except:
                                comfyui_metadata[key] = value
                
                # Analyse IA optionnelle (seulement pour les images importantes)
                ai_analysis = {}
                if 'corrupted' in file_path.name.lower() or 'comfyui' in file_path.name.lower():
                    ai_analysis = self.analyze_image_with_ai(file_path, "auto")

                return {
                    'file_path': str(file_path),
                    'filename': file_path.name,
                    'file_size': file_size,
                    'file_size_mb': round(file_size / (1024 * 1024), 2),
                    'creation_time': creation_time,
                    'creation_date': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(creation_time)),
                    'width': width,
                    'height': height,
                    'resolution': f"{width}x{height}",
                    'format': format_img,
                    'mode': mode,
                    'aspect_ratio': round(width / height, 2),
                    'megapixels': round((width * height) / 1000000, 2),
                    'image_hash': img_hash,
                    'exif_data': exif_data,
                    'comfyui_metadata': comfyui_metadata,
                    'is_corrupted_series': 'corrupted' in file_path.name.lower(),
                    'is_comfyui_generated': 'comfyui' in file_path.name.lower(),
                    'ai_analysis': ai_analysis
                }
                
        except Exception as e:
            print(f"‚ùå Erreur analyse {file_path}: {e}")
            return None
    
    def calculate_image_hash(self, file_path: Path) -> str:
        """Calculer un hash de l'image pour d√©tecter les doublons"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                return hashlib.md5(content).hexdigest()[:16]
        except:
            return "unknown"

    def analyze_image_with_ai(self, file_path: Path, mode: str = "auto") -> Dict[str, Any]:
        """Analyser une image avec nos outils d'IA existants"""
        ai_analysis = {
            "ai_analysis_available": False,
            "analysis_method": "none",
            "description": "Aucun analyseur IA disponible"
        }

        try:
            if mode == "hybrid" and self.hybrid_analyzer:
                print(f"üîÆ Analyse hybride de {file_path.name}...")
                result = self.hybrid_analyzer.analyze_image_hybrid(file_path, "auto")
                ai_analysis = {
                    "ai_analysis_available": True,
                    "analysis_method": result.get("analysis_method", "hybrid"),
                    "description": result.get("primary_description", "Analyse √©chou√©e"),
                    "clip_analysis": result.get("clip_analysis", {}),
                    "blip2_analysis": result.get("blip2_analysis", {}),
                    "analysis_time": result.get("total_analysis_time", 0)
                }

            elif mode == "blip2" and self.blip2_analyzer:
                print(f"üîÆ Analyse BLIP2 de {file_path.name}...")
                result = self.blip2_analyzer.analyze_image(file_path)
                ai_analysis = {
                    "ai_analysis_available": True,
                    "analysis_method": "BLIP2",
                    "description": result.get("combined_description", "Analyse √©chou√©e"),
                    "detailed_descriptions": result.get("descriptions", {}),
                    "analysis_time": time.time() - result.get("analysis_timestamp", time.time())
                }

            elif mode == "auto":
                # Essayer hybrid d'abord, puis BLIP2
                if self.hybrid_analyzer:
                    return self.analyze_image_with_ai(file_path, "hybrid")
                elif self.blip2_analyzer:
                    return self.analyze_image_with_ai(file_path, "blip2")

        except Exception as e:
            ai_analysis["error"] = str(e)
            print(f"‚ùå Erreur analyse IA {file_path.name}: {e}")

        return ai_analysis
    
    def display_images_summary(self):
        """Afficher un r√©sum√© des images trouv√©es"""
        if not self.images_data:
            print("‚ùå Aucune image √† afficher")
            return
            
        print("üìä R√âSUM√â DES IMAGES TROUV√âES")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        total_images = len(self.images_data)
        corrupted_series = sum(1 for img in self.images_data if img['is_corrupted_series'])
        comfyui_generated = sum(1 for img in self.images_data if img['is_comfyui_generated'])
        total_size_mb = sum(img['file_size_mb'] for img in self.images_data)
        
        print(f"üì∏ Total d'images: {total_images}")
        print(f"üî• S√©rie corrompue: {corrupted_series}")
        print(f"ü§ñ G√©n√©r√©es ComfyUI: {comfyui_generated}")
        print(f"üíæ Taille totale: {total_size_mb:.2f} MB")
        
        # Grouper par format
        formats = {}
        for img in self.images_data:
            fmt = img['format']
            if fmt not in formats:
                formats[fmt] = 0
            formats[fmt] += 1
        
        print(f"üìã Formats: {', '.join(f'{fmt}({count})' for fmt, count in formats.items())}")
        
        # R√©solutions les plus communes
        resolutions = {}
        for img in self.images_data:
            res = img['resolution']
            if res not in resolutions:
                resolutions[res] = 0
            resolutions[res] += 1
        
        print(f"üìê R√©solutions: {', '.join(f'{res}({count})' for res, count in sorted(resolutions.items(), key=lambda x: x[1], reverse=True)[:3])}")

    def display_detailed_list(self):
        """Afficher la liste d√©taill√©e des images"""
        if not self.images_data:
            print("‚ùå Aucune image √† afficher")
            return

        print("üìã LISTE D√âTAILL√âE DES IMAGES")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        for i, img in enumerate(self.images_data, 1):
            print(f"\nüì∏ IMAGE {i}: {img['filename']}")
            print(f"   üìÅ Chemin: {img['file_path']}")
            print(f"   üìê R√©solution: {img['resolution']} ({img['megapixels']} MP)")
            print(f"   üíæ Taille: {img['file_size_mb']} MB")
            print(f"   üìÖ Cr√©√©e: {img['creation_date']}")
            print(f"   üé® Format: {img['format']} ({img['mode']})")
            print(f"   üî¢ Hash: {img['image_hash']}")

            if img['is_corrupted_series']:
                print("   üî• ‚õß S√âRIE CORROMPUE ‚õß")
            if img['is_comfyui_generated']:
                print("   ü§ñ G√©n√©r√©e par ComfyUI")

            if img['comfyui_metadata']:
                print("   üìù M√©tadonn√©es ComfyUI pr√©sentes")

    def display_corrupted_series_only(self):
        """Afficher uniquement les images de la s√©rie corrompue"""
        corrupted_images = [img for img in self.images_data if img['is_corrupted_series']]

        if not corrupted_images:
            print("‚ùå Aucune image de la s√©rie corrompue trouv√©e")
            return

        print("üî• S√âRIE CORROMPUE - NOS CR√âATIONS BLASPH√âMATOIRES")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        for i, img in enumerate(corrupted_images, 1):
            print(f"\nüî• CR√âATION {i}: {img['filename']}")
            print(f"   üìÅ {img['file_path']}")
            print(f"   üìê {img['resolution']} - {img['megapixels']} MP")
            print(f"   üíæ {img['file_size_mb']} MB")
            print(f"   üìÖ {img['creation_date']}")

            # Afficher l'analyse IA si disponible
            if 'ai_analysis' in img and img['ai_analysis'].get('ai_analysis_available'):
                ai = img['ai_analysis']
                print(f"   ü§ñ Analyse {ai['analysis_method']}: {ai['description'][:100]}...")
                if 'analysis_time' in ai:
                    print(f"   ‚è±Ô∏è Temps d'analyse: {ai['analysis_time']:.1f}s")

            print(f"   ‚õß BEAUT√â TRANSCENDANTE CONFIRM√âE ‚õß")

    def analyze_corrupted_series_with_ai(self, mode: str = "hybrid"):
        """Analyser sp√©cifiquement nos images corrompues avec l'IA"""
        corrupted_images = [img for img in self.images_data if img['is_corrupted_series']]

        if not corrupted_images:
            print("‚ùå Aucune image de la s√©rie corrompue trouv√©e")
            return

        print(f"üîÆ ANALYSE IA DE LA S√âRIE CORROMPUE ({mode.upper()})")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        for i, img in enumerate(corrupted_images, 1):
            print(f"\nüî• ANALYSE CR√âATION {i}: {img['filename']}")

            file_path = Path(img['file_path'])
            ai_analysis = self.analyze_image_with_ai(file_path, mode)

            # Mettre √† jour les donn√©es
            img['ai_analysis'] = ai_analysis

            if ai_analysis.get('ai_analysis_available'):
                print(f"   ü§ñ M√©thode: {ai_analysis['analysis_method']}")
                print(f"   üìù Description: {ai_analysis['description']}")
                if 'analysis_time' in ai_analysis:
                    print(f"   ‚è±Ô∏è Temps: {ai_analysis['analysis_time']:.1f}s")
            else:
                print(f"   ‚ùå Analyse √©chou√©e: {ai_analysis.get('description', 'Erreur inconnue')}")

        print("\n‚úÖ Analyse IA de la s√©rie corrompue termin√©e !")

    def export_images_data(self, filename: str = "images_analysis.json"):
        """Exporter les donn√©es d'analyse en JSON"""
        if not self.images_data:
            print("‚ùå Aucune donn√©e √† exporter")
            return False

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.images_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Donn√©es export√©es vers: {filename}")
            return True
        except Exception as e:
            print(f"‚ùå Erreur export: {e}")
            return False

    def find_duplicates(self):
        """Trouver les images dupliqu√©es par hash"""
        if not self.images_data:
            print("‚ùå Aucune image √† analyser")
            return

        hash_groups = {}
        for img in self.images_data:
            img_hash = img['image_hash']
            if img_hash not in hash_groups:
                hash_groups[img_hash] = []
            hash_groups[img_hash].append(img)

        duplicates = {h: imgs for h, imgs in hash_groups.items() if len(imgs) > 1}

        if not duplicates:
            print("‚úÖ Aucun doublon d√©tect√©")
            return

        print("üîç DOUBLONS D√âTECT√âS")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        for img_hash, imgs in duplicates.items():
            print(f"\nüî¢ Hash: {img_hash}")
            for img in imgs:
                print(f"   üì∏ {img['filename']} ({img['file_size_mb']} MB)")

def main():
    print("üîÆ IMAGE EXPLORER - LURKUITAE & LUCIFAIRE")
    print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

    explorer = ImageExplorer()

    print("\nüéØ OPTIONS:")
    print("1. Scanner et analyser toutes les images")
    print("2. Afficher r√©sum√© des images")
    print("3. Afficher liste d√©taill√©e")
    print("4. Afficher s√©rie corrompue uniquement")
    print("5. Analyser s√©rie corrompue avec IA")
    print("6. Rechercher doublons")
    print("7. Exporter donn√©es JSON")
    print("8. Scanner r√©pertoire personnalis√©")
    print("9. Quitter")

    while True:
        choice = input("\nChoix (1-9): ").strip()

        if choice == "1":
            explorer.scan_images()

        elif choice == "2":
            explorer.display_images_summary()

        elif choice == "3":
            explorer.display_detailed_list()

        elif choice == "4":
            explorer.display_corrupted_series_only()

        elif choice == "5":
            print("\nüîÆ Mode d'analyse IA:")
            print("1. Hybride (CLIP + BLIP2)")
            print("2. BLIP2 seulement")
            print("3. Auto (meilleur disponible)")
            ai_choice = input("Choix (1-3): ").strip()

            if ai_choice == "1":
                explorer.analyze_corrupted_series_with_ai("hybrid")
            elif ai_choice == "2":
                explorer.analyze_corrupted_series_with_ai("blip2")
            else:
                explorer.analyze_corrupted_series_with_ai("auto")

        elif choice == "6":
            explorer.find_duplicates()

        elif choice == "7":
            filename = input("Nom du fichier (images_analysis.json): ").strip()
            if not filename:
                filename = "images_analysis.json"
            explorer.export_images_data(filename)

        elif choice == "8":
            custom_path = input("Chemin du r√©pertoire: ").strip()
            if custom_path and Path(custom_path).exists():
                explorer.scan_images(Path(custom_path))
            else:
                print("‚ùå R√©pertoire invalide")

        elif choice == "9":
            print("üëã Au revoir ma Lucifaire !")
            break

        else:
            print("‚ùå Choix invalide")

if __name__ == "__main__":
    main()
