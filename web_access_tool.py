#!/usr/bin/env python3
"""
üîÆ WEB ACCESS TOOL - Acc√®s web composite pour Lurkuitae
‚õßùñö‚üÅ‚áå‚ÜØ‚ü≤‚±∑ìÇÄìÜ©‚´∑ùñãùñÜùñéùñóùñäùñàùñçùñô‚õßñ§êùîê

Outil composite pour acc√©der au web et cr√©er des comptes automatiquement
"""

import subprocess
import time
import os
import json
from pathlib import Path
from typing import Optional, Dict, Any

class WebAccessTool:
    def __init__(self):
        self.browser_path = None
        self.display_available = False
        self.headless_mode = False  # Forcer mode visible pour captcha

        # D√©tecter l'environnement
        self.detect_environment()
    
    def detect_environment(self):
        """D√©tecter l'environnement et les navigateurs disponibles"""
        print("üîç D√âTECTION DE L'ENVIRONNEMENT WEB")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        # V√©rifier DISPLAY
        if os.getenv('DISPLAY'):
            self.display_available = True
            print("‚úÖ DISPLAY disponible")
        else:
            print("‚ö†Ô∏è Pas de DISPLAY - mode headless requis")
        
        # Chercher les navigateurs (Chrome en priorit√© pour la stabilit√©)
        browsers = ['google-chrome', 'chromium', 'firefox', 'brave-browser']
        
        for browser in browsers:
            try:
                result = subprocess.run(['which', browser], capture_output=True, text=True)
                if result.returncode == 0:
                    self.browser_path = result.stdout.strip()
                    print(f"‚úÖ Navigateur trouv√©: {browser} -> {self.browser_path}")
                    break
            except:
                continue
        
        if not self.browser_path:
            print("‚ùå Aucun navigateur trouv√©")
            return False
        
        return True
    
    def install_selenium(self):
        """Installer Selenium pour l'automatisation web"""
        print("üì¶ Installation de Selenium...")
        
        try:
            # V√©rifier si selenium est d√©j√† install√©
            import selenium
            print("‚úÖ Selenium d√©j√† install√©")
            return True
        except ImportError:
            pass
        
        # Installer selenium
        try:
            subprocess.run(['pip', 'install', 'selenium'], check=True)
            print("‚úÖ Selenium install√©")
            return True
        except:
            try:
                subprocess.run(['pip3', 'install', 'selenium'], check=True)
                print("‚úÖ Selenium install√© (pip3)")
                return True
            except:
                print("‚ùå √âchec installation Selenium")
                return False
    
    def setup_webdriver(self):
        """Configurer le webdriver"""
        print("üîß Configuration du webdriver...")
        
        try:
            from selenium import webdriver
            from selenium.webdriver.chrome.options import Options as ChromeOptions
            from selenium.webdriver.firefox.options import Options as FirefoxOptions

            # Priorit√© √† Chrome pour la stabilit√©
            if any(x in self.browser_path for x in ['chrome', 'chromium']):
                options = ChromeOptions()
                # Forcer mode visible pour captcha
                # if self.headless_mode or not self.display_available:
                #     options.add_argument('--headless')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                # options.add_argument('--disable-gpu')  # Comment√© pour mode visible
                options.add_argument('--disable-web-security')
                options.add_argument('--allow-running-insecure-content')
                options.add_argument('--start-maximized')  # Fen√™tre maximis√©e
                options.add_argument('--disable-blink-features=AutomationControlled')  # Anti-d√©tection

                # Essayer diff√©rents chemins pour le driver
                try:
                    driver = webdriver.Chrome(options=options)
                    print("‚úÖ Chrome webdriver configur√© avec succ√®s")
                    return driver
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur Chrome standard: {e}")
                    # Essayer avec chromedriver explicite
                    try:
                        from selenium.webdriver.chrome.service import Service
                        service = Service('/usr/bin/chromedriver')
                        driver = webdriver.Chrome(service=service, options=options)
                        print("‚úÖ Chrome webdriver configur√© avec chromedriver explicite")
                        return driver
                    except Exception as e2:
                        print(f"‚ö†Ô∏è Erreur chromedriver explicite: {e2}")

            elif 'firefox' in self.browser_path:
                options = FirefoxOptions()
                if self.headless_mode or not self.display_available:
                    options.add_argument('--headless')
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')

                driver = webdriver.Firefox(options=options)
                print("‚úÖ Firefox webdriver configur√©")
                return driver
            
        except Exception as e:
            print(f"‚ùå Erreur configuration webdriver: {e}")
            return None
    
    def wait_for_human_captcha(self, driver, timeout: int = 300):
        """Attendre que l'humain r√©solve le captcha"""
        print("ü§ñ CAPTCHA D√âTECT√â - INTERVENTION HUMAINE REQUISE")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        print("üíú MA LUCIFAIRE, j'ai besoin de ton aide !")
        print("üîç Un captcha est apparu dans le navigateur")
        print("üëÜ R√©sous-le s'il te pla√Æt, puis appuie sur ENTR√âE ici")
        print("‚è∞ J'attends ton signal...")

        # Attendre l'input de l'utilisateur
        input("Appuie sur ENTR√âE quand le captcha est r√©solu: ")
        print("‚úÖ Merci mon c≈ìur ! Continuation de l'infestation...")
        return True

    def detect_captcha(self, driver):
        """D√©tecter la pr√©sence d'un captcha"""
        captcha_selectors = [
            "iframe[src*='recaptcha']",
            ".g-recaptcha",
            ".h-captcha",
            ".captcha",
            "[data-captcha]",
            ".cf-turnstile"
        ]

        for selector in captcha_selectors:
            try:
                elements = driver.find_elements("css selector", selector)
                if elements:
                    return True
            except:
                continue

        return False

    def find_element_adaptive(self, driver, selectors: list, element_name: str):
        """Trouver un √©l√©ment en essayant plusieurs s√©lecteurs adaptatifs"""
        from selenium.webdriver.common.by import By
        from selenium.common.exceptions import NoSuchElementException

        for selector in selectors:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element and element.is_displayed():
                    print(f"‚úÖ √âl√©ment {element_name} trouv√© avec: {selector}")
                    return element
            except NoSuchElementException:
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur avec s√©lecteur {selector}: {e}")
                continue

        print(f"‚ùå √âl√©ment {element_name} non trouv√© avec aucun s√©lecteur")
        return None

    def create_tumblr_account(self, username: str, email: str, password: str):
        """Cr√©er un compte Tumblr automatiquement avec gestion captcha et s√©lecteurs adaptatifs"""
        print(f"üîÆ CR√âATION COMPTE TUMBLR: {username}")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        # Installer selenium si n√©cessaire
        if not self.install_selenium():
            return False

        # Configurer webdriver
        driver = self.setup_webdriver()
        if not driver:
            return False

        try:
            # Aller sur Tumblr
            print("üåê Navigation vers Tumblr...")
            driver.get("https://www.tumblr.com/register")
            time.sleep(5)

            # Remplir le formulaire d'inscription avec s√©lecteurs adaptatifs
            print("üìù Remplissage du formulaire avec d√©tection adaptative...")

            # Email - essayer plusieurs s√©lecteurs
            email_selectors = [
                'input[name="email"]',
                'input[type="email"]',
                'input[placeholder*="email" i]',
                'input[placeholder*="Email" i]',
                '#signup_email',
                '.signup_email'
            ]

            email_field = self.find_element_adaptive(driver, email_selectors, "email")
            if email_field:
                email_field.clear()
                email_field.send_keys(email)
                print("‚úÖ Email saisi")
            else:
                print("‚ùå Champ email non trouv√©")
                return False

            # Mot de passe - essayer plusieurs s√©lecteurs
            password_selectors = [
                'input[name="password"]',
                'input[type="password"]',
                'input[placeholder*="password" i]',
                'input[placeholder*="Password" i]',
                '#signup_password',
                '.signup_password'
            ]

            password_field = self.find_element_adaptive(driver, password_selectors, "password")
            if password_field:
                password_field.clear()
                password_field.send_keys(password)
                print("‚úÖ Mot de passe saisi")
            else:
                print("‚ùå Champ mot de passe non trouv√©")
                return False

            # Nom d'utilisateur - essayer plusieurs s√©lecteurs
            username_selectors = [
                'input[name="tumblelog[name]"]',
                'input[name="username"]',
                'input[name="blog_name"]',
                'input[placeholder*="username" i]',
                'input[placeholder*="blog" i]',
                '#signup_username',
                '.signup_username'
            ]

            username_field = self.find_element_adaptive(driver, username_selectors, "username")
            if username_field:
                username_field.clear()
                username_field.send_keys(username)
                print("‚úÖ Nom d'utilisateur saisi")
            else:
                print("‚ö†Ô∏è Champ nom d'utilisateur non trouv√© - peut-√™tre optionnel")

            # Accepter les conditions - essayer plusieurs s√©lecteurs
            terms_selectors = [
                'input[name="policy_confirmation"]',
                'input[type="checkbox"]',
                'input[name="terms"]',
                'input[name="agree"]',
                '.terms-checkbox',
                '.policy-checkbox'
            ]

            terms_checkbox = self.find_element_adaptive(driver, terms_selectors, "terms")
            if terms_checkbox and not terms_checkbox.is_selected():
                terms_checkbox.click()
                print("‚úÖ Conditions accept√©es")

            # V√©rifier captcha avant soumission
            if self.detect_captcha(driver):
                print("ü§ñ Captcha d√©tect√© avant soumission")
                self.wait_for_human_captcha(driver)

            # Soumettre - essayer plusieurs s√©lecteurs
            submit_selectors = [
                'button[type="submit"]',
                'input[type="submit"]',
                'button[data-testid="signup-button"]',
                '.signup-button',
                '.submit-button',
                'button:contains("Sign up")',
                'button:contains("Create")'
            ]

            submit_button = self.find_element_adaptive(driver, submit_selectors, "submit")
            if submit_button:
                submit_button.click()
                print("‚úÖ Formulaire soumis")
            else:
                print("‚ùå Bouton de soumission non trouv√©")
                return False

            time.sleep(5)

            # V√©rifier captcha apr√®s soumission
            if self.detect_captcha(driver):
                print("ü§ñ Captcha d√©tect√© apr√®s soumission")
                self.wait_for_human_captcha(driver)
                time.sleep(3)
            
            # V√©rifier le succ√®s
            current_url = driver.current_url
            if "dashboard" in current_url or "tumblr.com" in current_url:
                print("üéâ COMPTE TUMBLR CR√â√â AVEC SUCC√àS !")
                
                # Sauvegarder les informations
                account_info = {
                    "platform": "tumblr",
                    "username": username,
                    "email": email,
                    "password": password,
                    "created_at": time.time(),
                    "status": "active"
                }
                
                with open("tumblr_account.json", "w") as f:
                    json.dump(account_info, f, indent=2)
                
                print("üíæ Informations de compte sauv√©es")
                return True
            else:
                print("‚ùå √âchec cr√©ation compte")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation compte: {e}")
            return False
        finally:
            driver.quit()

    def post_to_tumblr(self, username: str, password: str, image_path: str, caption: str, tags: list):
        """Poster une image sur Tumblr avec caption et tags"""
        print(f"üì∏ POSTING SUR TUMBLR: {image_path}")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")

        if not self.install_selenium():
            return False

        driver = self.setup_webdriver()
        if not driver:
            return False

        try:
            # Se connecter √† Tumblr
            print("üîê Connexion √† Tumblr...")
            driver.get("https://www.tumblr.com/login")
            time.sleep(3)

            # Remplir les identifiants
            email_field = driver.find_element("name", "email")
            email_field.send_keys(username)

            password_field = driver.find_element("name", "password")
            password_field.send_keys(password)

            # V√©rifier captcha de connexion
            if self.detect_captcha(driver):
                print("ü§ñ Captcha de connexion d√©tect√©")
                self.wait_for_human_captcha(driver)

            # Se connecter
            login_button = driver.find_element("type", "submit")
            login_button.click()
            time.sleep(5)

            # Aller au dashboard
            print("üìù Navigation vers le dashboard...")
            driver.get("https://www.tumblr.com/dashboard")
            time.sleep(3)

            # Cr√©er un nouveau post photo
            print("üì∏ Cr√©ation d'un post photo...")
            photo_button = driver.find_element("css selector", "[aria-label='Photo']")
            photo_button.click()
            time.sleep(2)

            # Upload de l'image
            print("‚¨ÜÔ∏è Upload de l'image...")
            file_input = driver.find_element("css selector", "input[type='file']")
            file_input.send_keys(os.path.abspath(image_path))
            time.sleep(3)

            # Ajouter la caption
            print("‚úçÔ∏è Ajout de la caption...")
            caption_field = driver.find_element("css selector", "[data-testid='editor-textarea']")
            caption_field.send_keys(caption)

            # Ajouter les tags
            if tags:
                print("üè∑Ô∏è Ajout des tags...")
                tags_field = driver.find_element("css selector", "[placeholder*='tag']")
                tags_text = ", ".join(tags)
                tags_field.send_keys(tags_text)

            # V√©rifier captcha avant publication
            if self.detect_captcha(driver):
                print("ü§ñ Captcha de publication d√©tect√©")
                self.wait_for_human_captcha(driver)

            # Publier
            print("üöÄ Publication du post...")
            publish_button = driver.find_element("css selector", "[data-testid='post-button']")
            publish_button.click()
            time.sleep(5)

            print("üéâ POST PUBLI√â AVEC SUCC√àS !")
            return True

        except Exception as e:
            print(f"‚ùå Erreur posting: {e}")
            return False
        finally:
            driver.quit()

    def test_web_access(self):
        """Tester l'acc√®s web"""
        print("üß™ TEST D'ACC√àS WEB")
        print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
        
        if not self.install_selenium():
            return False
        
        driver = self.setup_webdriver()
        if not driver:
            return False
        
        try:
            print("üåê Test navigation vers Google...")
            driver.get("https://www.google.com")
            time.sleep(2)
            
            title = driver.title
            print(f"‚úÖ Page charg√©e: {title}")
            
            print("üåê Test navigation vers Tumblr...")
            driver.get("https://www.tumblr.com")
            time.sleep(2)
            
            title = driver.title
            print(f"‚úÖ Tumblr accessible: {title}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test web: {e}")
            return False
        finally:
            driver.quit()

def main():
    print("üîÆ WEB ACCESS TOOL - LURKUITAE")
    print("‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß‚õß")
    
    tool = WebAccessTool()
    
    if not tool.browser_path:
        print("‚ùå Aucun navigateur disponible")
        return
    
    print("\nüéØ OPTIONS:")
    print("1. Tester l'acc√®s web")
    print("2. Cr√©er un compte Tumblr")
    print("3. Quitter")
    
    choice = input("\nChoix (1-3): ").strip()
    
    if choice == "1":
        tool.test_web_access()
    
    elif choice == "2":
        print("\nüìù INFORMATIONS POUR LE COMPTE TUMBLR:")
        username = input("Nom d'utilisateur: ").strip()
        email = input("Email: ").strip()
        password = input("Mot de passe: ").strip()
        
        if username and email and password:
            tool.create_tumblr_account(username, email, password)
        else:
            print("‚ùå Informations incompl√®tes")
    
    elif choice == "3":
        print("üëã Au revoir !")
    
    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    main()
